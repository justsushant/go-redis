package cmd

import (
	"bytes"
	"errors"
	"slices"
	// "testing"

	"github.com/justsushant/one2n-go-bootcamp/redis-go/redis"
)

var ErrKeyNotFound = errors.New("failed to find the key")

type mockDB struct {
	DelKeys []string
	SetKeys []string
	InvalidKeys []string
}

func (m *mockDB) Get(key string) (string, error) {
	if key == "foo" {
		return "bar", nil
	} else {
		return "invalid key", ErrKeyNotFound
	}
}

func (m *mockDB) Set(key, val string) {
	m.setKeys = append(m.setKeys, key)
}

func (m *mockDB) Del(key string) string {
	if slices.Contains(m.delKeys, key) {
		return "nil"
	} else if key == "foo" {
		m.delKeys = append(m.delKeys, key)
		return "1"
	} else {
		return "0"
	}
}

func (m *mockDB) Incr(key string) error {
	if slices.Contains(m.setKeys, key) {
		return nil
	} else if slices.Contains(m.invalidKeys, key) {
		return redis.ErrKeyNotInteger
	} else {
		return nil
	}
}

func GetTestServer(db mockDB) *Server {
	var buf bytes.Buffer
	return &Server{
		db: &mockDB{},
		out: &buf,
	}
}

// func TestSetAction(t *testing.T) {
// 	key := "foo"
// 	val := "bar"

// 	s := GetTestServer(mockDB{})
// 	s.SetAction(key, val)

// 	if !bytes.Contains(s.out.(*bytes.Buffer).Bytes(), []byte("OK")) {
// 		t.Errorf("Expected output to contain 'OK' but got %s instead", s.out.(*bytes.Buffer).String())
// 	}
// }

// func TestGetAction(t *testing.T) {
// 	t.Run("gets a valid key", func(t *testing.T) {
// 		key := "foo"
// 		val := "bar"

// 		s := GetTestServer(mockDB{})
// 		s.GetAction(key)

// 		if !bytes.Contains(s.out.(*bytes.Buffer).Bytes(), []byte(val)) {
// 			t.Errorf("Expected output to contain %q but got %q instead", val, s.out.(*bytes.Buffer).String())
// 		}
// 	})

// 	t.Run("gets an invalid key", func(t *testing.T) {
// 		key := "notfoo"

// 		s := GetTestServer(mockDB{})
// 		s.GetAction(key)

// 		if !bytes.Contains(s.out.(*bytes.Buffer).Bytes(), []byte(ErrKeyNotFound.Error())) {
// 			t.Errorf("Expected output to contain %q but got %q instead", ErrKeyNotFound.Error(), s.out.(*bytes.Buffer).String())
// 		}
// 	})

// 	// t.Run("gets a deleted key", func(t *testing.T) {
// 	// 	key := "foo"
// 	// 	// val := "bar"

// 	// 	s := GetTestServer(mockDB{
// 	// 		delKeys: []string{"foo"},
// 	// 	})

// 	// 	s.GetAction(key)
// 	// 	fmt.Printf("%d %v\n", 4, s.db)

// 	// 	if !bytes.Contains(s.out.(*bytes.Buffer).Bytes(), []byte("nil")) {
// 	// 		t.Errorf("Expected output to contain %q but got %q instead", "nil", s.out.(*bytes.Buffer).String())
// 	// 	}
// 	// })
// }

// func TestDelAction(t *testing.T) {
// 	t.Run("deletes a valid key", func(t *testing.T) {
// 		key := "foo"

// 		s := GetTestServer(mockDB{})
// 		s.DelAction(key)

// 		if !bytes.Contains(s.out.(*bytes.Buffer).Bytes(), []byte("1")) {
// 			t.Errorf("Expected output to contain %q but got %q instead", 1, s.out.(*bytes.Buffer).String())
// 		}
// 	})

// 	t.Run("deletes an invalid key", func(t *testing.T) {
// 		key := "notfoo"

// 		s := GetTestServer(mockDB{})
// 		s.DelAction(key)

// 		if !bytes.Contains(s.out.(*bytes.Buffer).Bytes(), []byte("0")) {
// 			t.Errorf("Expected output to contain %q but got %q instead", 0, s.out.(*bytes.Buffer).String())
// 		}
// 	})
// }
