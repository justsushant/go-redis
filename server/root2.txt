// closure solution

/*
Copyright Â© 2024 NAME HERE <EMAIL ADDRESS>
*/
package cmd

import (
	"fmt"
	"os"

	"github.com/justsushant/one2n-go-bootcamp/redis-go/redis"
	"github.com/justsushant/one2n-go-bootcamp/redis-go/store/inMemoryStore"
	"github.com/spf13/cobra"
)


// rootCmd represents the base command when called without any subcommands
var rootCmd = &cobra.Command{
	Use:   "redis-go",
	Short: "a primitive redis implementation in go",
	Run: func(cmd *cobra.Command, args []string) {
		fmt.Println("Running")
	},
}

// SET command
func newSetCmd(server *Server) *cobra.Command {
	return &cobra.Command{
		Use:   "SET",
		Short: "sets the value for a particular key",
		Args:  cobra.ExactArgs(2),
		Run: func(cmd *cobra.Command, args []string) {
			key := args[0]
			value := args[1]
			server.SetAction(key, value)
		},
	}
}

// GET command
func newGetCmd(server *Server) *cobra.Command {
	return &cobra.Command{
		Use:   "GET",
		Short: "gets the value for a particular key",
		Args:  cobra.ExactArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			key := args[0]
			server.GetAction(key)
		},
	}
}

// // DELETE command
// func newDelCmd(server *Server) *cobra.Command {
// 	return &cobra.Command{
// 		Use:   "DEL",
// 		Short: "deletes the value for a particular key",
// 		Args:  cobra.ExactArgs(1),
// 		Run: func(cmd *cobra.Command, args []string) {
// 			key := args[0]
// 			err := server.db.Delete(key)
// 			if err != nil {
// 				fmt.Fprintln(server.out, "Error deleting value:", err)
// 				return
// 			}
// 			fmt.Fprintln(server.out, "Value deleted successfully")
// 		},
// 	}
// }

// Execute adds all child commands to the root command and sets flags appropriately.
// This is called by main.main(). It only needs to happen once to the rootCmd.
func Execute() {
	server := &Server{
		db:  redis.GetNewDB(inMemoryStore.NewInMemoryStore()),
		out: os.Stdout,
	}

	rootCmd.AddCommand(newSetCmd(server), newGetCmd(server))
	// rootCmd.AddCommand(newSetCmd(server), newGetCmd(server), newDelCmd(server))

	err := rootCmd.Execute()
	if err != nil {
		os.Exit(1)
	}
}

func init() {
	// Define your flags and configuration settings here.
}
